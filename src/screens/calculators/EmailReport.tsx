import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useSelector } from 'react-redux';
import { RootState } from '../../redux/store';
import { Transaction, TransactionType } from '../../redux/slices/transactionSlice';
import { formatCurrency } from '../../utils/formatters';
import axios from 'axios';
import { ENDPOINTS } from '../../config/api';

const EmailReport = () => {
  const { transactions } = useSelector((state: RootState) => state.transaction as any);
  const { user } = useSelector((state: RootState) => state.auth);
  const [email, setEmail] = useState(user?.email || '');
  const [isLoading, setIsLoading] = useState(false);

  const getCurrentMonthTransactions = () => {
    const currentDate = new Date();
    return transactions.filter((transaction: Transaction) => {
      const transactionDate = new Date(transaction.date);
      return (
        transactionDate.getMonth() === currentDate.getMonth() &&
        transactionDate.getFullYear() === currentDate.getFullYear()
      );
    });
  };

  const calculateMonthlyStats = () => {
    const monthlyTransactions = getCurrentMonthTransactions();
    const expenses = monthlyTransactions.filter((t: Transaction) => t.type === TransactionType.EXPENSE);
    const income = monthlyTransactions.filter((t: Transaction) => t.type === TransactionType.INCOME);

    const totalExpenses = expenses.reduce((sum: number, t: Transaction) => sum + t.amount, 0);
    const totalIncome = income.reduce((sum: number, t: Transaction) => sum + t.amount, 0);
    const balance = totalIncome - totalExpenses;

    return {
      totalExpenses,
      totalIncome,
      balance,
      expenses,
      income,
    };
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
    });
  };

  const generateReport = async () => {
    if (!email) {
      Alert.alert('Error', 'Please enter your email address');
      return;
    }

    setIsLoading(true);

    try {
      const stats = calculateMonthlyStats();
      const currentDate = new Date();
      const monthName = currentDate.toLocaleString('default', { month: 'long' });
      const year = currentDate.getFullYear();

      const reportContent = `
        <h2>Monthly Expense Report - ${monthName} ${year}</h2>
        
        <h3>Summary:</h3>
        <p>Total Income: ${formatCurrency(stats.totalIncome)}</p>
        <p>Total Expenses: ${formatCurrency(stats.totalExpenses)}</p>
        <p>Net Balance: ${formatCurrency(stats.balance)}</p>
        
        <h3>Expense Breakdown:</h3>
        ${stats.expenses.map((expense: Transaction) => `
          <div style="margin-bottom: 10px;">
            <h4>${expense.title}</h4>
            <p>Amount: ${formatCurrency(expense.amount)}</p>
            <p>Category: ${expense.category}</p>
            <p>Date: ${formatDate(expense.date)}</p>
          </div>
        `).join('')}
        
        <h3>Income Breakdown:</h3>
        ${stats.income.map((income: Transaction) => `
          <div style="margin-bottom: 10px;">
            <h4>${income.title}</h4>
            <p>Amount: ${formatCurrency(income.amount)}</p>
            <p>Category: ${income.category}</p>
            <p>Date: ${formatDate(income.date)}</p>
          </div>
        `).join('')}
        
        <p><em>Generated by Expenses Management App</em></p>
      `;

      const response = await axios.post(ENDPOINTS.EMAIL.SEND_REPORT, {
        email,
        reportData: {
          subject: `Monthly Expense Report - ${monthName} ${year}`,
          content: reportContent,
        },
      });

      if (response.data.success) {
        Alert.alert('Success', 'Report has been sent to your email');
      } else {
        throw new Error('Failed to send report');
      }
    } catch (error: any) {
      console.error('Error sending report:', error);
      let errorMessage = 'Failed to send email report. Please try again later.';
      
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        errorMessage = error.response.data.message || errorMessage;
      } else if (error.request) {
        // The request was made but no response was received
        errorMessage = 'No response from server. Please check your internet connection.';
      }
      
      Alert.alert('Error', errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Email Report</Text>
        <Text style={styles.subtitle}>Get your monthly expense report</Text>
      </View>

      <View style={styles.content}>
        <View style={styles.inputContainer}>
          <Text style={styles.label}>Email Address</Text>
          <View style={styles.inputWrapper}>
            <Ionicons name="mail-outline" size={20} color="#666" style={styles.inputIcon} />
            <TextInput
              style={styles.input}
              placeholder="Enter your email"
              keyboardType="email-address"
              autoCapitalize="none"
              value={email}
              onChangeText={setEmail}
            />
          </View>
        </View>

        <TouchableOpacity
          style={styles.generateButton}
          onPress={generateReport}
          disabled={isLoading}
        >
          {isLoading ? (
            <ActivityIndicator color="#fff" />
          ) : (
            <>
              <Text style={styles.generateButtonText}>Generate Report</Text>
              <Ionicons name="mail-outline" size={20} color="#fff" />
            </>
          )}
        </TouchableOpacity>

        <View style={styles.infoContainer}>
          <Text style={styles.infoTitle}>What's included in the report?</Text>
          <View style={styles.infoItem}>
            <Ionicons name="checkmark-circle-outline" size={20} color="#4CAF50" />
            <Text style={styles.infoText}>Monthly income and expense summary</Text>
          </View>
          <View style={styles.infoItem}>
            <Ionicons name="checkmark-circle-outline" size={20} color="#4CAF50" />
            <Text style={styles.infoText}>Detailed transaction breakdown</Text>
          </View>
          <View style={styles.infoItem}>
            <Ionicons name="checkmark-circle-outline" size={20} color="#4CAF50" />
            <Text style={styles.infoText}>Category-wise spending analysis</Text>
          </View>
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  content: {
    padding: 20,
  },
  inputContainer: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    color: '#333',
    marginBottom: 8,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#ddd',
    paddingHorizontal: 12,
  },
  inputIcon: {
    marginRight: 8,
  },
  input: {
    flex: 1,
    fontSize: 16,
    paddingVertical: 12,
  },
  generateButton: {
    backgroundColor: '#6200ee',
    borderRadius: 8,
    padding: 15,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 30,
  },
  generateButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginRight: 8,
  },
  infoContainer: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  infoItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  infoText: {
    fontSize: 16,
    color: '#666',
    marginLeft: 10,
  },
});

export default EmailReport; 